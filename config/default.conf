# kafka producer     
producer.metadata.broker.list=kafka:9092
producer.compression.codec=gzip
producer.retry.backoff.ms:integer=200
producer.message.send.max.retries:integer=10
producer.socket.keepalive.enable:boolean=true
producer.queue.buffering.max.messages:integer=100000
producer.queue.buffering.max.ms:integer=1000
producer.batch.num.messages:integer=1000000
producer.dr_cb:boolean=true
producer.enable.idempotence:boolean=false
producer.max.in.flight.requests.per.connection:integer=1000000

# kafka consumer  
consumer.group.id=cron
consumer.client.id=${HOSTNAME:-cron}
consumer.metadata.broker.list=kafka:9092
consumer.max.in.flight.requests.per.connection:integer=1000000
consumer.socket.keepalive.enable:boolean=false
    
# kafka topic
topic.acks:integer=-1
topic.auto.offset.reset=earliest
      
# sdk consumer
sdkConsumer.in.processing.max.messages:integer=1
sdkConsumer.queued.max.messages.bytes:integer=10485760
sdkConsumer.subscription.backoff.min.ms:integer=1000
sdkConsumer.subscription.backoff.max.ms:integer=60000
sdkConsumer.subscription.backoff.delta.ms:integer=1000
sdkConsumer.commit.interval.ms:integer=5000

# sdk producer    
sdkProducer.connect.timeout.ms:integer=5000
sdkProducer.disconnect.timeout.ms:integer=10000
sdkProducer.flush.timeout.ms:integer=2000

# dojot subjects
dojot.subjects.tenancy=dojot.tenancy
dojot.subjects.devices=dojot.device-manager.device
dojot.subjects.deviceData=device-data

# cronManager actions
actions.http.allowed.base.urls:string[]=["http://device-manager:5000"]
actions.http.timeout:integer=5000
actions.broker.allowed.subjects:string[]=["dojot.device-manager.device", "device-data"]

# cronManager db
db.mongodb.url=mongodb://mongodb:27017
options.use.new.url.parser:boolean=true
options.connect.timeout.ms:integer=2500
options.replica.set:boolean=false
options.use.unified.topology:boolean=true

# healthChecker timeout
healthChecker.kafka.interval.ms:integer=30000

# logger
logger.verbose:boolean=false
logger.console.level=info
logger.file.enable:boolean=false
logger.file.filename=cron-${HOSTNAME:-}-logs-%DATE%.log
logger.file.level=info

# Lightship
lightship.detect.kubernetes:boolean=false
# Lightship (milliseconds) waits for Node.js process to exit gracefully after it receives a shutdown signal
lightship.graceful.shutdown.timeout:integer=120000
# Lightship (milliseconds) waits for shutdown handlers
lightship.shutdown.handler.timeout:integer=15000

limit:integer=1024
